ben@ubuntu:~/Desktop$ mkdir week12
ben@ubuntu:~/Desktop$ cd week12
ben@ubuntu:~/Desktop/week12$ cp ../week11/ch11.h ./week12/ch12.h
cp: cannot create regular file './week12/ch12.h': No such file or directory
ben@ubuntu:~/Desktop/week12$ cp ../week11/ch11.h ./ch12.h
ben@ubuntu:~/Desktop/week12$ ls
ch12.h
ben@ubuntu:~/Desktop/week12$ vi 12-1.c
ben@ubuntu:~/Desktop/week12$ gcc 12-1.c -o 12-1
12-1.c: In function ‘main’:
12-1.c:29:78: error: too few arguments to function ‘strlen’
    fprintf(stdout,"child %d recieve %s from parent! total=%d\n",getpid(),buf,strlen());
                                                                              ^~~~~~
In file included from ch12.h:5:0,
                 from 12-1.c:1:
/usr/include/string.h:384:15: note: declared here
 extern size_t strlen (const char *__s)
               ^~~~~~
ben@ubuntu:~/Desktop/week12$ vi 12-1.c
ben@ubuntu:~/Desktop/week12$ gcc 12-1.c -o 12-1
12-1.c: In function ‘main’:
12-1.c:29:85: error: ‘len’ undeclared (first use in this function); did you mean ‘mblen’?
  fprintf(stdout,"child %d recieve %s from parent! total=%d\n",getpid(),buf,strlen(len));
                                                                                   ^~~
                                                                                     mblen
12-1.c:29:85: note: each undeclared identifier is reported only once for each function it appears in
ben@ubuntu:~/Desktop/week12$ vi 12-1.c
ben@ubuntu:~/Desktop/week12$ gcc 12-1.c -o 12-1
12-1.c: In function ‘main’:
12-1.c:29:60: warning: format ‘%d’ expects argument of type ‘int’, but argument 5 has type ‘size_t {aka long unsigned int}’ [-Wformat=]
    fprintf(stdout,"child %d recieve %s from parent! total=%d\n",getpid(),buf,strlen(buf));
                                                           ~^                 ~~~~~~~~~~~
                                                           %ld
ben@ubuntu:~/Desktop/week12$ ./12-1
parent 2145 send success1
child 2146 recieve 2145 say hello to 2146
 from parent! total=23
ben@ubuntu:~/Desktop/week12$ vi 12-1.c
ben@ubuntu:~/Desktop/week12$ cp 12-1.c 12-2.c
ben@ubuntu:~/Desktop/week12$ vi 12-2.c
ben@ubuntu:~/Desktop/week12$ gcc 12-2.c -o 12-2
12-2.c: In function ‘main’:
12-2.c:30:60: warning: format ‘%d’ expects argument of type ‘int’, but argument 5 has type ‘size_t {aka long unsigned int}’ [-Wformat=]
    fprintf(stdout,"child %d recieve %s from parent! total=%d\n",getpid(),buf,strlen(buf));
                                                           ~^                 ~~~~~~~~~~~
                                                           %ld
12-2.c:32:28: warning: format ‘%d’ expects argument of type ‘int’, but argument 4 has type ‘size_t {aka long unsigned int}’ [-Wformat=]
   sprintf(buf,"%d recieve %d from %d\n",getpid(),strlen(buf),getppid());
                           ~^                     ~~~~~~~~~~~
                           %ld
12-2.c:42:3: error: expected ‘;’ before ‘sprintf’
   sprintf(buf,"%d say hello to %d\n",getpid(),k);
   ^~~~~~~
ben@ubuntu:~/Desktop/week12$ vi 12-2.c
ben@ubuntu:~/Desktop/week12$ gcc 12-2.c -o 12-2
12-2.c: In function ‘main’:
12-2.c:30:60: warning: format ‘%d’ expects argument of type ‘int’, but argument 5 has type ‘size_t {aka long unsigned int}’ [-Wformat=]
    fprintf(stdout,"child %d recieve %s from parent! total=%d\n",getpid(),buf,strlen(buf));
                                                           ~^                 ~~~~~~~~~~~
                                                           %ld
12-2.c:32:28: warning: format ‘%d’ expects argument of type ‘int’, but argument 4 has type ‘size_t {aka long unsigned int}’ [-Wformat=]
   sprintf(buf,"%d recieve %d from %d\n",getpid(),strlen(buf),getppid());
                           ~^                     ~~~~~~~~~~~
                           %ld
12-2.c:42:3: error: expected ‘;’ before ‘sprintf’
   sprintf(buf,"%d say hello to %d\n",getpid(),k);
   ^~~~~~~
ben@ubuntu:~/Desktop/week12$ vi 12-2.c
ben@ubuntu:~/Desktop/week12$ gcc 12-2.c -o 12-2
12-2.c: In function ‘main’:
12-2.c:30:61: warning: format ‘%hd’ expects argument of type ‘int’, but argument 5 has type ‘size_t {aka long unsigned int}’ [-Wformat=]
    fprintf(stdout,"child %d recieve %s from parent! total=%hd\n",getpid(),buf,strlen(buf));
                                                           ~~^                 ~~~~~~~~~~~
                                                           %ld
12-2.c:32:28: warning: format ‘%d’ expects argument of type ‘int’, but argument 4 has type ‘size_t {aka long unsigned int}’ [-Wformat=]
   sprintf(buf,"%d recieve %d from %d\n",getpid(),strlen(buf),getppid());
                           ~^                     ~~~~~~~~~~~
                           %ld
ben@ubuntu:~/Desktop/week12$ ./12-2
child 2266 recieve 2265 say hello to 2266
 from parent! total=23
2265 : 2266 recieve 23 from 2265

ben@ubuntu:~/Desktop/week12$ 


ben@ubuntu:~/Desktop/week12$ cat 12-1.c 12-2.c
#include"ch12.h"
int main()
{
	int fd[2],i;
	pid_t k;
	char buf[100];
	memset(buf,0,sizeof(buf));
	if((pipe(fd))<0)
	{
		perror("pipe failed!\n");
		exit(-1);
	}
	k=fork();
	if(k<0)
	{
		perror("fork failed!\n");
                exit(-1);
	}
	else if(k==0)
	{
		close(fd[1]);
		i=read(fd[0],buf,sizeof(buf));
		if(i<=0)
		{
			printf("child recieve falied1\n");
		}
		else
		{
			fprintf(stdout,"child %d recieve %s from parent! total=%d\n",getpid(),buf,strlen(buf));
		}
		exit(0);
	}
	else
	{
		close(fd[0]);
		sprintf(buf,"%d say hello to %d\n",getpid(),k);
		i=write(fd[1],buf,sizeof(buf));
		if(i>0)
		{
			printf("parent %d send success1\n",getpid());

		}
		wait(NULL);
		return 0;
	}
}



#include"ch12.h"
int main()
{
	int fd1[2],fd2[2],i;
	pid_t k;
	char buf[100];
	memset(buf,0,sizeof(buf));
	if((pipe(fd1))<0||(pipe(fd2))<0)
	{
		perror("pipe failed!\n");
		exit(-1);
	}
	k=fork();
	if(k<0)
	{
		perror("fork failed!\n");
                exit(-1);
	}
	else if(k==0)
	{
		close(fd1[1]);
		close(fd2[0]);
		i=read(fd1[0],buf,sizeof(buf));
		if(i<=0)
		{
			printf("child recieve falied1\n");
		}
		else
		{
			fprintf(stdout,"child %d recieve %s from parent! total=%hd\n",getpid(),buf,strlen(buf));
		}
		sprintf(buf,"%d recieve %d from %d\n",getpid(),strlen(buf),getppid());
		write(fd2[1],buf,strlen(buf));
		close(fd2[1]);
		close(fd1[0]);
		exit(0);
	}
	else
	{
		close(fd1[0]);
		close(fd2[1]);
		sprintf(buf,"%d say hello to %d\n",getpid(),k);
		i=write(fd1[1],buf,sizeof(buf));
		read(fd2[0],buf,sizeof(buf));
		printf("%d : %s\n",getpid(),buf);
		wait(NULL);
		close(fd1[1]);
		close(fd2[0]);
		return 0;
	}
}


ben@ubuntu:~/Desktop/week12$ cat 12-3.c 12-4.c
#include"ch12.h"
int main()
{
	int fd1[2],fd2[2],i;
	char buf[100];
	memset(buf,0,sizeof(buf));
	pid_t k1,k2;
	if((pipe(fd1)<0)||(pipe(fd2)<0))
	{ 
		perror("pipe failed!\n");
		exit(-1);
	}
	k1=fork();
	if(k1<0)
	{
		perror("fork1 failed!\n");
		exit(-1);
	}
	else if(k1==0)
	{
		close(fd1[0]);
		close(fd2[1]);
		sprintf(buf,"%d : %d say hello\n",getppid(),getpid());
		write(fd1[1],buf,sizeof(buf));
		read(fd2[0],buf,sizeof(buf));
		printf("%d : %s\n",getppid(),buf);
		exit(0);
	}
	else
	{
		k2=fork();
		if(k2<0)
		{       
			perror("fork2 failed!\n");
			exit(-1);
		}       
		else if(k2==0)
		{       
			close(fd1[0]);
			close(fd2[1]);
			read(fd1[0],buf,sizeof(buf));
                        printf("%d : %s\n",getppid(),buf);
			sprintf(buf,"%d : %d say ok\n",getppid(),getpid());
			write(fd2[1],buf,sizeof(buf));
			exit(0);

		}
		else
		{
			close(fd1[0]);
			close(fd1[1]);
			close(fd2[0]);
			close(fd2[1]);
			wait(NULL);
			wait(NULL);
			return 0;
		}
	}
}
#include"ch12.h"
int main()
{
	int fd[2],i;
	char buf[100];
	memset(buf,0,sizeof(buf));
	pid_t k;
	if(pipe(fd)<0)
	{
		perror("pipe failed!\n");
	}
	k=fork();
	if(k<0)
	{
		perror("fork error!\n");
		exit(-1);
	}
	else if(k==0)
	{
		close(fd[0]);
		close(1);
		dup(fd[1]);
		execlp("./test","./test","Hello world",NULL);

	}
	else
	{
		close(fd[1]);
		// sleep(1);
		i=read(fd[0],buf,sizeof(buf));
		if(i<=0)
		{
			perror("write error\n");
		}
		else
		{
			printf("pipe data : %s",buf);
		}
		wait(NULL);
	}
	return 0;
}
ben@ubuntu:~/Desktop/week12$ ./12-3
1768 : 
ben@ubuntu:~/Desktop/week12$ ./12-4
wea
pipe data : test :pid=1772,ppid=1771
argv[0]=./test
argv[1]=Hello world




ben@ubuntu:~/Desktop/week12$ cat work.c
#include"ch12.h"
int main()
{
	int fd[2],i,j;
	int fd2[2];
	char buf[100];
	char *b="88";
	memset(buf,0,sizeof(buf));
	if((pipe(fd)<0)||(pipe(fd2)<0))
	{
		perror("pipe failed\n");
		exit(-1);
	}	
	while(1)
	{
		fgets(buf,sizeof(buf),stdin);
		j=strncmp(b,buf,2);
		if(j==0)
			break;
		pid_t p1;
		p1=fork();
		if(p1<0)
		{
			perror("fork p1 error!\n");
			exit(-1);
		}
		else if(p1==0)
		{
			close(fd[0]);
			close(fd2[1]);
			sprintf(buf,"child1 say hello to child2!\n");
			i=write(fd[1],buf,sizeof(buf));
			if(i==0)
			{
				printf("child1 write failed!\n");
			}
			else
			{
				printf("write to pipe : %s\n",buf);
			}
			sleep(2);
			i=read(fd2[0],buf,sizeof(buf));
			if(i==0)
			{
				printf("child1 read failed!\n");
			}
			else
			{
				printf("read from pipe : %s\n",buf);
				//exit(0);
			}
		}
		else
		{
			sleep(1);
			pid_t p2;
			p2=fork();
			if(p2<0)
			{
				perror("fork p2 error!\n");
				exit(-1);
			}
			else if(p2==0)
			{
				close(fd[1]);
				close(fd2[0]);
				i=read(fd[0],buf,sizeof(buf));
				if(i==0)
				{
					printf("child2 read failed!\n");
				}
				else
				{
					printf("read from pipe : %s\n",buf);
				}
				close(fd2[0]);
				sprintf(buf,"child2 say hello to child1!\n");
				i=write(fd2[1],buf,sizeof(buf));
				if(i==0)
				{
					printf("child2 write failed!\n");
				}
				else
				{
					printf("write to pipe : %s\n",buf);
				}
				//exit(0);
			}
			else
			{
				close(fd[0]);
				close(fd[1]);
				close(fd2[0]);	
				close(fd2[1]);
				wait(NULL);
				wait(NULL);
				//return 0;	
			}
		}
	}
}

