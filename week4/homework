  1-6 查看你的系统的头文件limits.h。系统相关的静态限制值有哪些?它们的值各为多少?特别地，整数类型、浮点类型和双精度类型的最大、最小值各为多少?
  带符号char：
              /* Minimum and maximum values a `signed char' can hold.  */
               #  define SCHAR_MIN	(-128)
               #  define SCHAR_MAX	127
               无符号char：
               /* Maximum value an `unsigned char' can hold.  (Minimum is 0.)  */
               #  define UCHAR_MAX	255
               带符号short：
              /* Minimum and maximum values a `signed short int' can hold.  */
               #  define SHRT_MIN	(-32768)
               #  define SHRT_MAX	32767
               无符号short：
               /* Maximum value an `unsigned short int' can hold.  (Minimum is 0.)  */
               #  define USHRT_MAX	65535
               带符号整型：
              /* Minimum and maximum values a `signed int' can hold.  */
               #  define INT_MIN	(-INT_MAX - 1)
               #  define INT_MAX	2147483647
                无符号整型：
               /* Maximum value an `unsigned int' can hold.  (Minimum is 0.)  */
               #  define UINT_MAX	4294967295U
               带符号长整型：
               /* Minimum and maximum values a `signed long int' can hold.  */
               #  if __WORDSIZE == 64
               #   define LONG_MAX	9223372036854775807L
               #  else
               #   define LONG_MAX	2147483647L
               #  endif
               #  define LONG_MIN	(-LONG_MAX - 1L)
               无符号长整形：
               /* Maximum value an `unsigned long int' can hold.  (Minimum is 0.)  */
               #  if __WORDSIZE == 64
               #   define ULONG_MAX	18446744073709551615UL
               #  else
               #   define ULONG_MAX	4294967295UL
               #  endif
               带符号长长整型：
               /* Minimum and maximum values a `signed long long int' can hold.  */
               #   define LLONG_MAX	9223372036854775807LL
               #   define LLONG_MIN	(-LLONG_MAX - 1LL)
               无符号长长整型：
               /* Maximum value an `unsigned long long int' can hold.  (Minimum is 0.)  */
               #   define ULLONG_MAX	18446744073709551615ULL
		
		#include <stdio.h>
		void int_num()
		{
			int i =1;
			while(i>0)
			{
				i=i<<1;
				if(i<0)
				{
					int a=i-1; 
					printf("%d\n",a);
				}
				else
				{
					printf("%d\n",i);
				}

			}
			printf("%d\n",i);
		}
		void short_num()
		{
			short i =1;
			while(i>0)
			{
				i=i<<1;
				if(i<0)
				{
					short a=i-1; 
					printf("%d\n",a);
				}
				else
				{
					printf("%d\n",i);
				}

			}
			printf("%d\n",i);
		}
		void long_num()
		{
			long i =1;
			while(i>0)
			{
				i=i<<1;
				if(i<0)
				{
					long a=i-1; 
					printf("%ld\n",a);
				}
				else
				{
					printf("%ld\n",i);
				}

			}
			printf("%d\n",i);
		}
		void char_num()
		{
			char i =1;
			while(i>0)
			{
				i=i<<1;
				if(i<0)
				{
					char a=i-1; 
					printf("%d\n",a);
				}
				else
				{
					printf("%d\n",i);
				}

			}
			printf("%d\n",i);
		}
		void unsigned_char_num()
		{
			unsigned char i =1;
			while(i>0)
			{
				i=i<<1;
				if(i<0)
				{
					unsigned char a=i-1; 
					printf("%d\n",a);
				}
				else
				{
					printf("%d\n",i);
				}

			}
			printf("%d\n",i);
		}
		void unsigned_int_num()
		{
			unsigned int i =1;
			while(i>0)
			{
				i=i<<1;
				if(i<0)
				{
					unsigned int a=i-1; 
					printf("%u\n",a);
				}
				else
				{
					printf("%u\n",i);
				}

			}
		}
		void unsigned_short_num()
		{
			unsigned short i =1;
			while(i>0)
			{
				i=i<<1;
				if(i<0)
				{
					unsigned short a=i-1; 
					printf("%u\n",a);
				}
				else
				{
					printf("%u\n",i);
				}

			}
		}
		void unsigned_long_num()
		{
			unsigned long i =1;
			while(i>0)
			{
				i=i<<1;
				if(i<0)
				{
					unsigned long a=i-1; 
					printf("%u\n",a);
				}
				else
				{
					printf("%u\n",i);
				}

			}
		}
		void float_num()
		{
			float float_n = -8.25;
		    char *tmp = (char *)&float_n;
		    //0 111 1111 1111 1111 1111 1111 1111 1111
		    *tmp = 0xff; //1111 1111  尾数 
		    *(tmp + 1) = 0xff;  //1111 1111 
		    *(tmp + 2) = 0x7f;  //0111 1111  阶码最后一位为0  
		    *(tmp + 3) = 0x7f;  //0111 1111 小端  符号 阶码    
			printf("最大float： f = %f\n", float_n);
			printf("最大float： f = %e\n", float_n);

			float float_n1 = -8.25;
		    char *tmp2 = (char *)&float_n1;
			//1 111 1111 1111 1111 1111 1111 1111 1111
		    *tmp2 = 0xff; //1111 1111  尾数 
		    *(tmp2 + 1) = 0xff;  //1111 1111 
		    *(tmp2 + 2) = 0x7f;  //0111 1111  阶码最后一位为0  
		    *(tmp2 + 3) = 0xff;  //0111 1111 小端  符号 阶码 
			printf("最小float： f = -%f\n", float_n);
			printf("最小float： f = -%e\n", float_n);
		} 

		void double_num()
		{
			//0 111 1111 1110 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 
		    double double_n = -6.25; 
		    char *tmp1 = (char *)&double_n;
		    *tmp1 = 0xff;
		    *(tmp1 + 1) = 0xff;
		    *(tmp1 + 2) = 0xff;
		    *(tmp1 + 3) = 0xff;
		    *(tmp1 + 4) = 0xff;
		    *(tmp1 + 5) = 0xff;
		    *(tmp1 + 6) = 0xef;
		    *(tmp1 + 7) = 0x7f; //小端 
		    printf("最大double f = %lf\n",double_n);
			printf("最大double f = %e\n",double_n);

			//1 111 1111 1110 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 
		    double double_n1 = -3.25; 
		    char *tmp3 = (char *)&double_n1;
		    *tmp3 = 0xff;
		    *(tmp3 + 1) = 0xff;
		    *(tmp3 + 2) = 0xff;
		    *(tmp3 + 3) = 0xff;
		    *(tmp3 + 4) = 0xff;
		    *(tmp3 + 5) = 0xff;
		    *(tmp3 + 6) = 0xef;
		    *(tmp3 + 7) = 0xff; //小端 
		    printf("最小double f = %lf\n",double_n1);
		    printf("最小double f = %e\n",double_n1);
		}
		void cicle()
		{
			int ch = 1;
			while(ch)
			{
				printf("-------------------------------------\n"); 
				printf("1.float类型最大最小值。\n");
				printf("2.double类型最大最小值。\n");
				printf("3.int类型最大最小值。\n");
				printf("4.char类型最大最小值。\n");
				printf("5.short类型最大最小值。\n");
				printf("6.long类型最大最小值。\n");
				printf("7.unsigned_char类型最大最小值。\n");
				printf("8.unsigned_int类型最大最小值。\n");
				printf("9.unsigned_short类型最大最小值。\n");
				printf("10.unsigned_long类型最大最小值。\n");
				printf("0.退出。\n");
				printf("-------------------------------------\n"); 
				scanf("%d",&ch); 
				switch(ch)
				{
					case 1:
						float_num();
						break;
					case 2:
						double_num();
						break;
					case 3:
						int_num();
						break;
					case 4:
						char_num();
						break;
					case 5:
						short_num();
						break;
					case 6:
						long_num();
						break;
					case 7:
						unsigned_char_num();
						break;
					case 8:
						unsigned_int_num();
						break;
					case 9:
						unsigned_short_num();
						break;
					case 10:
						unsigned_long_num();
						break;
					default: 
						break;
				}

			}
		}
		int main() {
		    cicle();
		    return 0;
		}
    
    
    
    
    
  2-7 编写程序说明gets()函数的危险性。
  
  ben@ubuntu:~/Desktop$ mkdir homework
ben@ubuntu:~/Desktop$ cd homework
ben@ubuntu:~/Desktop/homework$ vi 1.c
ben@ubuntu:~/Desktop/homework$ gcc -g 1.c -o 1
1.c: In function ‘main’:
1.c:16:9: warning: implicit declaration of function ‘gets’; did you mean ‘fgets’? [-Wimplicit-function-declaration]
         gets(buffer.buf);
         ^~~~
         fgets
/tmp/ccarwJxT.o: In function `main':
/home/ben/Desktop/homework/1.c:16: warning: the `gets' function is dangerous and should not be used.
ben@ubuntu:~/Desktop/homework$ cat 1.c
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#define BUF_SIZE 8
int main(void)
{
	FILE *fd;
   	int fgets_yes;
 	struct iobuf 
	{
    		char buf[BUF_SIZE];
   		char others[BUF_SIZE];
   	}buffer;
  	memset(&buffer,'\0',sizeof(struct iobuf)); 
        fprintf(stdout,"please enter a line\n");
        gets(buffer.buf);
        fprintf(stdout,"gets() get string \"%s\"\n",buffer.buf);
        /* 查看溢出情况 */
        fprintf(stdout,"buffer.others is \"%s\"\n",buffer.others);
  	exit(0);
}

ben@ubuntu:~/Desktop/homework$ ./1
please enter a line
123456789
gets() get string "123456789"
buffer.others is "9"



 定义一个结构体类型，将两个数组结合在一起，当输入字符超过buf的大小时，gets()会导致数据溢出到成员others中。


  
  
  
  设某个文件含n个记录，文件的第一个字(4字节）给出记录的总个数n，随后的n个字给出各个记录的长度（字节数)，剩余部分则由各个记录组成。
                 编写一个根据文件指针和记录编号（从Ⅰ开始编号）读取第k个记录的函数。
#include <stdio.h>
		#include <stdlib.h>
		#include <string.h>
		#include <math.h>
		void findljj(FILE *fp,int i)
		{
			char str[60];
			char buffer[20];
			char buf[100];
			int length[100];
			int b = 0;//某数前面数据的长度
			//读出数据的个数 
			memset(buf,0,sizeof(buf));
			memset(buffer,0,sizeof(buffer));
			memset(length,0,sizeof(length));
			fseek(fp , 0 ,SEEK_SET);
		    fread(buffer, 4, 1, fp);

			int n; //数据个数 
		    sscanf(buffer,"%d",&n);    

		    //读出数据的长度 
			fseek(fp , 4 ,SEEK_SET);
		    fread(buf, 4*n, 1, fp);
		    int j , w=0;
		    for(j = 0;j<4*n;j+=4)
		    {
			if(buf[j] !=' ' && buf[j+1] == ' ')
			{
				length[w++] =(int)(buf[j] - '0');

				}
			if(buf[j] !=' ' && buf[j+1] != ' ' && buf[j+2] == ' ')
			{
				length[w++] =(int)((buf[j] - '0')*10 +buf[j+1]- '0');
				}
				if(buf[j] !=' ' && buf[j+1] != ' ' && buf[j+2] != ' ' && buf[j+3] == ' ')
			{
				length[w++] =(int)((buf[j] - '0')*100 +(buf[j+1] - '0')*10+ (buf[j+2] - '0'));
				}
				if(buf[j] !=' ' && buf[j+1] != ' ' && buf[j+2] != ' ' && buf[j+3] != ' ')
			{
				length[w++] =(int)((buf[j] - '0')*1000 +(buf[j+1] - '0')*100+(buf[j+2] - '0')*10+(buf[j+3] - '0'));
				}

			}
		    int l;
			for(l = 0;l<i-1;l++)
			{
				b=length[l]+b;		
			}
		    //读出第i个数据的内容

		    fseek(fp , (n+1)*4+b ,SEEK_SET);
			if(fgets (str, length[i-1]+1, fp)!=NULL ) {
			puts(str);
		   }
		   else{
			  printf("error");
		   }
		}
		int main ()
		{
		   FILE *fp;
		   fp = fopen("file.txt","w+");
		   int i; //第几个数据  
		   scanf("%d",&i); 
		   //写入数据 
		   fputs("10  ", fp); 

		   fputs("10  ", fp); 
		   fputs("2   ", fp);
		   fputs("2   ", fp);
		   fputs("5   ", fp);
		   fputs("1   ", fp);
		   fputs("1   ", fp);
		   fputs("1   ", fp);
		   fputs("1   ", fp);
		   fputs("1   ", fp);
		   fputs("1   ", fp);
		   fputs("C Programming Langauge abcdefghijk", fp);

		   findljj(fp,i);
		   fclose(fp);

		   return 0;
		}
