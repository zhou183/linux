ben@ubuntu:~/Desktop/week6$ mkdir error
ben@ubuntu:~/Desktop/week6$ cd error
ben@ubuntu:~/Desktop/week6/error$ vi error.c
ben@ubuntu:~/Desktop/week6/error$ gcc -Wall error.c -o error
ben@ubuntu:~/Desktop/week6/error$ ./error
i = 123456789
Segmentation fault
ben@ubuntu:~/Desktop/week6/error$ cat error.c
#include "../ch06.h"
#define N 10
int a[N],i;
int main()
{
    for(i = 0;i<N;i++)
        a[i]=i+1;
    a[N]=123456789;
    printf("i = %d\n",i);
    printf("%d\n",a[i]);
    return 0;
}

原因：因为数组越界，所以a[10]=123456789 占了原本i所在的内存地址，因此打印出来的i为123456789，而a[123456789]不存在，发生数组越界，未给他分配地址空间，所以发生段错误。

修改后的代码及运行结果：
ben@ubuntu:~/Desktop/week6/error$ cp error.c error1.c
ben@ubuntu:~/Desktop/week6/error$ vi error1.c
ben@ubuntu:~/Desktop/week6/error$ gcc -Wall error1.c -o error1
ben@ubuntu:~/Desktop/week6/error$ ./error1
i = 123456789
123456789
ben@ubuntu:~/Desktop/week6/error$ cat error1.c
#include "../ch06.h"
#define N 10
int a[N],i;
int main()
{
    for(i = 0;i<N;i++)
        a[i]=i+1;
    a[N]=123456789;
    printf("i = %d\n",i);
    printf("%d\n",a[10]);
    return 0;
}




6-7.c
ben@ubuntu:~/Desktop/week6$ cat 6-7.c
#include"ch06.h"
static void set_env_string(void)
{
	char test_env[]="test_env=test";
	if(putenv(test_env)!=0)
	{
		printf("Putenv is failed!\n");
	}
	printf("1.The test_env = %s\n",getenv("test_env"));
}
static void show_env_string()
{
	printf("2.The test_env = %s\n",getenv("test_env"));
}
int main()
{
	set_env_string();
	show_env_string();
	return 0;

}
ben@ubuntu:~/Desktop/week6$ ./6-7
1.The test_env = test
2.The test_env = (null)

修改后的运行结果和代码：
ben@ubuntu:~/Desktop/week6$ vi 6-7.c
ben@ubuntu:~/Desktop/week6$ gcc -g 6-7.c -o 6-7
ben@ubuntu:~/Desktop/week6$ ./6-7
1.The test_env = test
2.The test_env = test
ben@ubuntu:~/Desktop/week6$ cat 6-7.c
#include"ch06.h"
char test_env[]="test_env=test";
static void set_env_string(void)
{
	if(putenv(test_env)!=0)
	{
		printf("Putenv is failed!\n");
	}
	printf("1.The test_env = %s\n",getenv("test_env"));
}
static void show_env_string()
{
	printf("2.The test_env = %s\n",getenv("test_env"));
}
int main()
{
	set_env_string();
	show_env_string();
	return 0;

}
用putenv来设置环境变量， 就必须要保证参数是一个长期存在的内容。 因此，只能选择全局变量、常量或动态内存等。将test_env[]设置为全局变量可解决问题。


